#!/usr/bin/python3
# coding by junenu(june@wanpachi.dev)

import re
import os
import platform
import subprocess
import argparse
import re
import ipaddress

# global variables
OS_NAME = platform.system()

# ping check parameters
ICMP_INTERVAL = 0.5
ICMP_COUNT = 3

# traceroute check parameters
TRACEROUTE_COUNT = "5"
TRACEROUTE_INTERVAL = "0.1"

# DNS server
GOOGLE_DNS_IPV4 = "8.8.8.8"
PRIVATE_DNS_1 = "192.168.10.1"

# Via NW devices
VIA_NW_DEVICES = {"192.168.10.1":"Router"} 

# domain name
YAHOO_DOMAIN = "yahoo.com"
GOOGLE_DOMAIN = "google.com"

# http check parameters
GOOGLE_IPV4 = "https://ipv4.google.com"
GOOGLE_IPV6 = "https://ipv6.google.com"

# argument parser
parser = argparse.ArgumentParser(description='Check network status.')
parser.add_argument('adapter_name', help='Adapter name')
args = parser.parse_args()

ADAPTER_NAME = args.adapter_name

# check if package is installed
def is_brew_package_installed(package_name):
    try:
        installed_packages = subprocess.check_output(['brew', 'list'], text=True)
        
        return package_name in installed_packages
    except subprocess.CalledProcessError:
        print("Error: brew command failed.")
        return False

# check ip address module
def check_ip_address():
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()

	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		# ipv4 address check
		ipv4_result = subprocess.run(["ip", "-4", "addr", "show", ADAPTER_NAME], capture_output=True, text=True)
		ipv4_result_output = ipv4_result.stdout

		# Extract the IP address using regular expression
		ipv4_address_match = re.search(r'inet (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2})', ipv4_result_output)
		if ipv4_address_match:
			ipv4_address = ipv4_address_match.group(1)
			print("IPv4 Address:", '\033[34m'+ipv4_address+'\033[0m')
		else:
			print("IPv4 Address not found.")

		# Extract the default gateway using regular expression
		ipv4_interface = ipaddress.ip_interface(ipv4_address)
		ipv4_default_gateway = ipv4_interface.network.network_address + 1
		print("IPv4 Default Gateway:", '\033[34m'+str(ipv4_default_gateway)+'\033[0m')

		# ipv6 address check
		ipv6_result = subprocess.run(["ip", "-6", "addr", "show", ADAPTER_NAME], capture_output=True, text=True)
		ipv6_result_output = ipv6_result.stdout

		# Extract the IP address using regular expression
		ipv6_address_match = re.search(r'inet6 ([0-9a-fA-F:]+/\d{1,3})', ipv6_result_output)
		if ipv6_address_match:
			ipv6_address = ipv6_address_match.group(1)
			print("IPv6 Address:", '\033[34m'+ipv6_address+'\033[0m')
		else:
			print("IPv6 Address not found.")

		# Extract the default gateway using regular expression
		ipv6_default_gateway = re.findall(r"([0-9a-fA-F:]+)", ipv6_result_output)
		ipv6_default_gateway_address = ipv6_default_gateway[0] if ipv6_default_gateway else "Not found"
		print("IPv6 Default Gateway:", '\033[34m'+ipv6_default_gateway_address+'\033[0m')
	
	else:
		print("Not supported OS.")
		exit()

# ping check module	
def check_ping(PING_TARGET=None):
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()

	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		# ping to default gateway
		ipv4_result = subprocess.run(["ip", "-4", "addr", "show", ADAPTER_NAME], capture_output=True, text=True)
		ipv4_result_output = ipv4_result.stdout
		ipv4_address_match = re.search(r'inet (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2})', ipv4_result_output)
		ipv4_address = ipv4_address_match.group(1)
		ipv4_interface = ipaddress.ip_interface(ipv4_address)
		ipv4_default_gateway = ipv4_interface.network.network_address + 1

		if PING_TARGET is None:
			PING_TARGET = ipv4_default_gateway
			
		ping_gateway_result = os.system("ping -c " + str(ICMP_COUNT) + " -i " + str(ICMP_INTERVAL) + " " + str(PING_TARGET) + " > /dev/null")
		if ping_gateway_result == 0:
			print("Ping to", PING_TARGET, '\033[32m'+'OK'+'\033[0m')
		else:
			print("Ping to", PING_TARGET, '\033[31m'+'NG'+'\033[0m')
	
	else:
		print("Not supported OS.")
		exit()

# traceroute check module
def check_traceroute(destination_ip):
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()
	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		result = subprocess.run(["sudo", "mtr", "-4", "-n", "-r", "-c" , TRACEROUTE_COUNT, "-i", TRACEROUTE_INTERVAL, destination_ip], capture_output=True, text=True)
		ip_addresses = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', result.stdout)
		print("Traceroute to", destination_ip, "is", ip_addresses)
		for ip in ip_addresses:
			if ip in VIA_NW_DEVICES:
				print("Via", VIA_NW_DEVICES[ip], ":", ip)
		else:
			print("Trace complete.")

	else:
		print("Not supported OS.")
		exit()

# dns check module
def check_dns_a(DOMAIN_NAME, DNS_SERVER=None):
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()

	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		#DNS cache clear
		print("Clearing DNS cache...")
		subprocess.run(["killall", "-HUP", "mDNSResponder"])
		print("DNS cache cleared.")

		#DNS resolution check
		if DNS_SERVER is None:
			result = subprocess.run(["dig", DOMAIN_NAME, "A", "+short"], stdout=subprocess.PIPE)
			if result.stdout != b"":
				print("IPv4DNS resolution to", DOMAIN_NAME, '\033[32m'+'OK'+'\033[0m')
			else:
				print("IPv4DNS resolution to", DOMAIN_NAME, '\033[31m'+'NG'+'\033[0m')
		else:
			result = subprocess.run(["dig", DOMAIN_NAME, "A", "@"+DNS_SERVER,"+short"], stdout=subprocess.PIPE)
			if result.stdout != b"":
				print("IPv4DNS resolution to", DOMAIN_NAME, "with", DNS_SERVER, '\033[32m'+'OK'+'\033[0m')
			else:
				print("IPv4DNS resolution to", DOMAIN_NAME, "with", DNS_SERVER, '\033[31m'+'NG'+'\033[0m')

	else:
		print("Not supported OS.")
		exit()

def check_dns_aaaa(DOMAIN_NAME, DNS_SERVER=None):
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()

	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		#DNS cache clear
		print("Clearing DNS cache...")
		subprocess.run(["killall", "-HUP", "mDNSResponder"])
		print("DNS cache cleared.")

		#DNS resolution check
		if DNS_SERVER is None:
			result = subprocess.run(["dig", DOMAIN_NAME, "AAAA", "+short"], stdout=subprocess.PIPE)
			if result.stdout != b"":
				print("IPv6DNS resolution to", DOMAIN_NAME, '\033[32m'+'OK'+'\033[0m')
			else:
				print("IPv6DNS resolution to", DOMAIN_NAME, '\033[31m'+'NG'+'\033[0m')
		else:
			result = subprocess.run(["dig", DOMAIN_NAME, "AAAAA", "@"+DNS_SERVER,"+short"], stdout=subprocess.PIPE)
			if result.stdout != b"":
				print("IPv6DNS resolution to", DOMAIN_NAME, "with", DNS_SERVER, '\033[32m'+'OK'+'\033[0m')
			else:
				print("IPv6DNS resolution to", DOMAIN_NAME, "with", DNS_SERVER, '\033[31m'+'NG'+'\033[0m')

	else:
		print("Not supported OS.")
		exit()

def check_http(DOMAIN_NAME):
	if OS_NAME == "Windows":
		print("Not supported OS.")
		exit()
	
	elif OS_NAME == "Darwin" or OS_NAME == "Linux":
		response = subprocess.run(["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", DOMAIN_NAME], capture_output=True, text=True)
		if response.stdout == "200":
			print("HTTP to", DOMAIN_NAME, '\033[32m'+'OK'+'\033[0m')
		else:
			print("HTTP to", DOMAIN_NAME, '\033[31m'+'NG'+'\033[0m')

	else:
		print("Not supported OS.")
		exit()

# main precedure
def main():
	# check if iproute2mac is installed for macOS
	if OS_NAME == "Darwin":
		if not is_brew_package_installed("iproute2mac"):
			print("Error: iproute2mac module not found.")
			exit()
		if not is_brew_package_installed("mtr"):
			print("Error: mtr module not found.")
			exit()
	print("------------ip address------------")
	# print interface name for macOS and Linux
	if OS_NAME == "Darwin" or OS_NAME == "Linux":
		print("Interface:", ADAPTER_NAME)
	check_ip_address()
	print(" ")
	print("------------ping------------")
	check_ping() #ping to default gateway
	check_ping(GOOGLE_DNS_IPV4)
	print(" ")
	print("------------traceroute------------")
	check_traceroute(GOOGLE_DNS_IPV4)
	print(" ")
	print("------------dns------------")
	check_dns_a(YAHOO_DOMAIN)
	check_dns_a(GOOGLE_DOMAIN)
	check_dns_a(GOOGLE_DOMAIN, GOOGLE_DNS_IPV4)
	check_dns_aaaa(GOOGLE_DOMAIN)
	print(" ")
	print("------------http------------")
	check_http(GOOGLE_IPV4)
	check_http(GOOGLE_IPV6)
	
# main
if __name__ == "__main__":
	main()
